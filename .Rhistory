# Gem generation
if(GP == 10){
for(i in 1:loot_num){
loot.temp.index <- roll(7)
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
print(loot.vector)
} else if(GP == 100){
for(i in 1:loot_num){
loot.temp.index <- roll(7) + 7
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
print(loot.vector)
}
}
if(type == "None"){
loot.vector <- ("No gems or art")
}
return(loot.vector)
}
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
# Output ===========
for(i in loot.list){
print(i)
}
get_hoard <- function(chal){''
if(chal < 5){
die_roll <- roll(100)
type <- hoard.df$Gems_Art[die_roll]
GP <- hoard.df$GP[die_roll]
DieNum <- hoard.df$DieNum[die_roll]
DieType <- hoard.df$DieType[die_roll]
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
cp <- ((c(1, 1, 1, 1, 1) * roll(6)) %>% sum())*100
sp <- (c(1, 1, 1) * roll(6)) %>% sum() * 100
gp <- (c(1, 1) * roll(6)) %>% sum() * 100
}
# roll the amount of loot items
loot_num <- 0
for(i in 1:DieNum){
loot_num <- loot_num + roll(DieType)
}
loot.vector <- c() # empty vector to return
# if type is art, add all art items
if(type == "Art"){
# Art generation
# TODO: add more conditional GP Art values to this
for(i in 1:loot_num){
loot.temp.index <- roll(10)
loot.vector <- append(loot.vector, art.df$Name[loot.temp.index])
}
print(loot.vector)
}
if(type == "Gems"){
# Gem generation
if(GP == 10){
for(i in 1:loot_num){
loot.temp.index <- roll(7)
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
print(loot.vector)
} else if(GP == 100){
for(i in 1:loot_num){
loot.temp.index <- roll(7) + 7
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
print(loot.vector)
}
}
if(type == "None"){
loot.vector <- ("No gems or art")
print(loot.vector)
}
print(paste("CP: ", cp, "SP: ", sp, "GP: ", gp))
return(loot.vector)
}
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
# Main ==========
loot.string <- get_loot(chal, die_roll)
# Main ==========
loot.string <- get_loot(chal, die_roll)
get_loot <- function(challenge, die_roll){
# returns individual treasure from an encounter
loot <- indiv.df$Reward[die_roll]
mult <- indiv.df$Multiplier[die_roll]
loot.string <- paste("Loot: ", loot, " times ", mult)
print(loot.string)
return(loot.string)
}
get_hoard <- function(chal){''
if(chal < 5){
die_roll <- roll(100)
type <- hoard.df$Gems_Art[die_roll]
GP <- hoard.df$GP[die_roll]
DieNum <- hoard.df$DieNum[die_roll]
DieType <- hoard.df$DieType[die_roll]
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
cp <- ((c(1, 1, 1, 1, 1) * roll(6)) %>% sum())*100
sp <- (c(1, 1, 1) * roll(6)) %>% sum() * 100
gp <- (c(1, 1) * roll(6)) %>% sum() * 100
}
# roll the amount of loot items
loot_num <- 0
for(i in 1:DieNum){
loot_num <- loot_num + roll(DieType)
}
loot.vector <- c() # empty vector to return
# if type is art, add all art items
if(type == "Art"){
# Art generation
# TODO: add more conditional GP Art values to this
for(i in 1:loot_num){
loot.temp.index <- roll(10)
loot.vector <- append(loot.vector, art.df$Name[loot.temp.index])
}
print(loot.vector)
}
if(type == "Gems"){
# Gem generation
if(GP == 10){
for(i in 1:loot_num){
loot.temp.index <- roll(7)
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
print(loot.vector)
} else if(GP == 100){
for(i in 1:loot_num){
loot.temp.index <- roll(7) + 7
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
print(loot.vector)
}
}
if(type == "None"){
loot.vector <- ("No gems or art")
print(loot.vector)
}
print(paste("CP: ", cp, "SP: ", sp, "GP: ", gp))
return(loot.vector)
}
# Main ==========
loot.string <- get_loot(chal, die_roll)
loot.list <- get_hoard(chal)
# Output ===========
for(i in loot.list){
print(i)
}
print(paste("CP: ", cp, "SP: ", sp, "GP: ", gp))
# Main ==========
loot.string <- get_loot(chal, die_roll)
# Main ==========
loot.string <- get_loot(chal, die_roll)
loot.list <- get_hoard(chal)
# Main ==========
loot.string <- get_loot(chal, die_roll)
# Main ==========
loot.string <- get_loot(chal, die_roll)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
rol(100)
roll(100)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
# generate crafting materials
craft.vector <- c()
# get table row from first roll
die_roll <- roll(100)
type <- hoard.df$Gems_Art[die_roll]
GP <- hoard.df$GP[die_roll]
DieNum <- hoard.df$DieNum[die_roll]
DieType <- hoard.df$DieType[die_roll]
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
CraftGP <- hoard.df$ArtificerLootGP[die_roll]
CraftDieType <- hoard.df$ArtificerDieType[die_roll]
CraftDieNum <- hoard.df$ArtificerDieNum[1]
cp <- ((c(1, 1, 1, 1, 1) * roll(6)) %>% sum())*100
sp <- (c(1, 1, 1) * roll(6)) %>% sum() * 100
gp <- (c(1, 1) * roll(6)) %>% sum() * 100
# generate crafting materials
craft.vector <- c()
craftLootNum <- roll(CraftDieType)
# generate crafting materials
craft.vector <- c()
craftLootNum <- 0
for(i in 1:CraftDieNum){
craftLootNum <- craftLootNum + roll(CraftDieType)
}
if(CraftGP == 10){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12)
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
if(CraftGP == 25){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12) + 12
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
CraftLootNum <- 0
for(i in 1:CraftDieNum){
CraftLootNum <- CraftLootNum + roll(CraftDieType)
}
if(CraftGP == 10){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12)
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
if(CraftGP == 25){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12) + 12
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
loot.vector <- append(loot.vector, craft.vector)
loot.vector <- c() # empty vector to return
loot.vector <- c(paste("CP: ", cp), paste("SP: ",sp), paste("GP: ", gp)) # add money strings to loot vector
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
# get table row from first roll
die_roll <- roll(100)
type <- hoard.df$Gems_Art[die_roll]
GP <- hoard.df$GP[die_roll]
DieNum <- hoard.df$DieNum[die_roll]
DieType <- hoard.df$DieType[die_roll]
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
CraftGP <- hoard.df$ArtificerLootGP[die_roll]
CraftDieType <- hoard.df$ArtificerDieType[die_roll]
CraftDieNum <- hoard.df$ArtificerDieNum[1]
cp <- ((c(1, 1, 1, 1, 1) * roll(6)) %>% sum())*100
sp <- (c(1, 1, 1) * roll(6)) %>% sum() * 100
gp <- (c(1, 1) * roll(6)) %>% sum() * 100
# returns hoard of loot based on a d100 roll
if(chal < 5){
# get table row from first roll
die_roll <- roll(100)
type <- hoard.df$Gems_Art[die_roll]
GP <- hoard.df$GP[die_roll]
DieNum <- hoard.df$DieNum[die_roll]
DieType <- hoard.df$DieType[die_roll]
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
CraftGP <- hoard.df$ArtificerLootGP[die_roll]
CraftDieType <- hoard.df$ArtificerDieType[die_roll]
CraftDieNum <- hoard.df$ArtificerDieNum[1]
cp <- ((c(1, 1, 1, 1, 1) * roll(6)) %>% sum())*100
sp <- (c(1, 1, 1) * roll(6)) %>% sum() * 100
gp <- (c(1, 1) * roll(6)) %>% sum() * 100
}
# roll the amount of loot items
loot_num <- 0
for(i in 1:DieNum){
loot_num <- loot_num + roll(DieType)
}
# add money strings to loot vector
loot.vector <- c(paste("CP: ", cp), paste("SP: ",sp), paste("GP: ", gp))
# if type is art, add all art items
if(type == "Art"){
# Art generation
# TODO: add more conditional GP Art values to this
for(i in 1:loot_num){
loot.temp.index <- roll(10)
loot.vector <- append(loot.vector, art.df$Name[loot.temp.index])
}
}
if(type == "Gems"){
# Gem generation
if(GP == 10){
for(i in 1:loot_num){
loot.temp.index <- roll(7)
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
} else if(GP == 100){
for(i in 1:loot_num){
loot.temp.index <- roll(7) + 7
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
}
}
if(type == "None"){
loot.vector <- append(loot.vector, "No gems or art")
}
# generate crafting materials
craft.vector <- c()
CraftLootNum <- 0
for(i in 1:CraftDieNum){
CraftLootNum <- CraftLootNum + roll(CraftDieType)
}
if(CraftGP == 10){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12)
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
if(CraftGP == 25){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12) + 12
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
loot.vector <- append(loot.vector, craft.vector)
return(loot.vector)
for(i in loot.vector){print(i)}
loot.list <- get_hoard(chal)
get_hoard <- function(chal){
# returns hoard of loot based on a d100 roll
if(chal < 5){
# get table row from first roll
die_roll <- roll(100)
type <- hoard.df$Gems_Art[die_roll]
GP <- hoard.df$GP[die_roll]
DieNum <- hoard.df$DieNum[die_roll]
DieType <- hoard.df$DieType[die_roll]
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
CraftGP <- hoard.df$ArtificerLootGP[die_roll]
CraftDieType <- hoard.df$ArtificerDieType[die_roll]
CraftDieNum <- hoard.df$ArtificerDieNum[1]
cp <- ((c(1, 1, 1, 1, 1) * roll(6)) %>% sum())*100
sp <- (c(1, 1, 1) * roll(6)) %>% sum() * 100
gp <- (c(1, 1) * roll(6)) %>% sum() * 100
}
# roll the amount of loot items
loot_num <- 0
for(i in 1:DieNum){
loot_num <- loot_num + roll(DieType)
}
# add money strings to loot vector
loot.vector <- c(paste("CP: ", cp), paste("SP: ",sp), paste("GP: ", gp))
# if type is art, add all art items
if(type == "Art"){
# Art generation
# TODO: add more conditional GP Art values to this
for(i in 1:loot_num){
loot.temp.index <- roll(10)
loot.vector <- append(loot.vector, art.df$Name[loot.temp.index])
}
}
if(type == "Gems"){
# Gem generation
if(GP == 10){
for(i in 1:loot_num){
loot.temp.index <- roll(7)
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
} else if(GP == 100){
for(i in 1:loot_num){
loot.temp.index <- roll(7) + 7
loot.vector <- append(loot.vector, gems.df$Gemstones[loot.temp.index])
}
}
}
if(type == "None"){
loot.vector <- append(loot.vector, "No gems or art")
}
# generate crafting materials
craft.vector <- c()
CraftLootNum <- 0
for(i in 1:CraftDieNum){
CraftLootNum <- CraftLootNum + roll(CraftDieType)
}
if(CraftGP == 10){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12)
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
if(CraftGP == 25){
for(i in 1:CraftLootNum){
craft.temp.index <- roll(12) + 12
craft.vector <- append(craft.vector, artificer.df$Name[craft.temp.index])
}
}
loot.vector <- append(loot.vector, craft.vector)
return(loot.vector)
}
# Main ==========
loot.string <- get_loot(chal, die_roll)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
loot.list <- get_hoard(chal)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
for(i in loot.list){}
for(i in loot.list){print(i)}
if(exists(loot.list)){
for(i in loot.list){
print(i)
}
}
exists()
?exists
myEnvir
exists(loot.list)
exists(loot.list[1])
loot.list[1]
!is.na(loot.list)
!is.na(loot.list[1])
rm(loot.list)
!is.na(loot.list[1])
loot.list <- c(1:10)
exists(loot.list)
rm(loot.list)
missing(loot.list)
exists("loot.string")
exists("loot.vector")
exists("loot.list")
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
rm(list=ls())
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
print(paste("Total Coin GP: ", sum(gp, (sp/10), (cp/50))))
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
rm(list=ls())
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
MagItemDieNum <- hoard.df$MagicItemDieNum[die_roll]
MagItemDieType <- hoard.df$MagicItemDieType[die_roll]
MagicItemsTable <- hoard.df$MagicItemDieNum[die_roll]
paste("Roll ", MagItemDieNum, " d", MagItemDieType, " on Magic Item Table ", MagicItemsTable)
# print die rolls and table number for magic items, done in person
MagItemChar <- paste("Roll ", MagItemDieNum, " d", MagItemDieType, " on Magic Item Table ", MagicItemsTable)
loot.vector <- append(loot.vector, craft.vector, MagItemChar)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
loot.list
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/Loot_RNG.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
monster_xp <- c(50, 50, 75) # Monster encounter, enter xp points for each monster here
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
source("~/DND/Programs/RTools_DND/cr_calculator.R", echo=TRUE)
